'use strict';Object.defineProperty(exports,'__esModule',{value:true});const app_const_1=require('../app.const');const fileaction_1=require('../fileaction');const util=require('util');const cli_logger_1=require('../lib/cli-commander/cli.logger');const BuildResult_1=require('../models/BuildResult');const CompileResult_1=require('../models/CompileResult');const path=require('path');const exec=util.promisify(require('child_process').exec);class BuilderBot{constructor(){this.name='Builder Bot 715';this.debugMode=true;this.fileActions=new Array();}commitChange(projectPath,filename,cType){let fileExt=path.extname(filename);let action=this.getFileAction(fileExt);console.log('COMMIT CHANGE ACTION ::',action);if(cType===app_const_1.ChangeType.Changed&&action.Action===app_const_1.ActionType.Recompile){console.log('COMMIT CHANGE --:MATCH:- Building Project ::',filename);let buildRes=this.syncBuildProject(projectPath);cli_logger_1.Logger.logPurple('Project Build Dump ::',buildRes);}}addFileAction(fileExtension,actionType){this.fileActions.push(new fileaction_1.FileAction(fileExtension,actionType));}getFileAction(fileExtension,caseInsensitive=true){let result=new fileaction_1.FileAction(fileExtension,app_const_1.ActionType.Undefined);if(caseInsensitive){fileExtension=fileExtension.toUpperCase();}for(const action of this.fileActions){let actionFileExt=action.Extension;if(caseInsensitive){actionFileExt=actionFileExt.toUpperCase();}if(fileExtension===actionFileExt){result=action;break;}}return result;}showFileActions(){for(const fileAct of this.fileActions){cli_logger_1.Logger.logYellow('fileAction ::',fileAct);}}syncBuildProject(projectPath){let result=new BuildResult_1.BuildResult();let tscRes=this.shell_tsCompiler();if(tscRes.haveErrors){cli_logger_1.Logger.logFatalError('TypeScript Compiler Failed');cli_logger_1.Logger.logError('StdOut ::',tscRes.rawOutput);cli_logger_1.Logger.logError('StdErr ::',tscRes.rawError);process.exit(app_const_1.ErrorType.ERR_COMPILER_ERROR);}else{result.addOutputResult(tscRes);}let tsPathRes=this.shell_tsPath();if(tsPathRes.haveErrors){cli_logger_1.Logger.logFatalError('TypeScript Path Resolver Failed');cli_logger_1.Logger.logError('StdOut ::',tscRes.rawOutput);cli_logger_1.Logger.logError('StdErr ::',tscRes.rawError);process.exit(app_const_1.ErrorType.ERR_COMPILER_ERROR);}else{result.addOutputResult(tsPathRes);}return result;}shell_executeCompiler(cmd){let result=new CompileResult_1.CompileResult();cli_logger_1.Logger.logPurple('Shell_tsCompile...');async function compile(){const {stdout,stderr}=await exec(cmd);result.rawError=stderr;result.rawOutput=stdout;result.success=result.rawError===null;result.haveErrors=result.success===false;}compile();return result;}shell_tsCompiler(){cli_logger_1.Logger.logPurple('Running TypeScript project Compiler...');return this.shell_executeCompiler('tsc');}shell_tsPath(){cli_logger_1.Logger.logPurple('Running TSPath...');return this.shell_executeCompiler('tspath --f');}}exports.BuilderBot=BuilderBot;